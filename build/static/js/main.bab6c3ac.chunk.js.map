{"version":3,"sources":["components/checkerboard/checkerboard.js","components/pathfinderComponents/simpleSelect.jsx","components/pathfinderComponents/navbar.jsx","utilities/nqueen.js","components/checkerboard/n-queen-comp.js","components/home/home.js","components/pathfinderComponents/node.jsx","components/pathfinderComponents/grid.jsx","components/pathfinderComponents/menu.jsx","components/algorithms/dijkstra.js","components/algorithms/recursiveMaze.js","components/algorithms/bfs.jsx","components/pathfinderComponents/pathfinder.jsx","components/algorithms/randomMaze.js","App.js","reportWebVitals.js","index.js"],"names":["CheckerBoard","size","queenPositions","checkerBoard","i","newRow","j","classNames","push","className","join","pos","x","y","_","find","theme","createTheme","useStyles","makeStyles","formControl","margin","spacing","minWidth","selectEmpty","marginTop","SimpleSelect","props","classes","React","useState","age","setAge","ThemeProvider","FormControl","InputLabel","id","Select","labelId","value","onChange","event","target","onAlgoChanged","items","map","item","itemidx","MenuItem","Navbar","type","to","style","color","Component","nqueen","n","queenPos","col","setQueenPos","console","log","length","parseInt","solved","isSafe","newPos","sleep","res","pop","isUnderAttack","queenPosition","d1","d2","s","Promise","resolve","setTimeout","placeQueens","count","setResult","Nqueen","setCount","result","padding","min","max","v","onClick","Home","Node","static","row","this","onMouseDown","isVisited","onMouseEnter","onMouseUp","getClassName","node","isWall","isStartNode","isEndNode","ispathNode","Grid","state","grid","rowidx","nodeidx","visitedNode","Menu","algorithms","onMazeChanged","mazes","onCreateMaze","onVisualize","onClearPath","onClearBoard","dijkstra","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","decideMaze","pairs","board","startRow","endRow","startCol","endCol","mid","Math","floor","random","start","end","xx","yy","recursiveMazeVertical","recursiveMazeHorizontal","bfsdfs","endNode","algo","list","nodesInOrder","currentNode","nodesToPush","getNeighbours","Pathfinder","handleMouseDown","newGrid","getNewGridWithWallToggled","setState","mouseIsPressed","handleMouseEnter","handleMouseUp","handleAlgoChanged","val","handleMazeChanged","maze","handleCreateMaze","newBoard","slice","randomMaze","getMaze","document","getElementById","handleClearBoard","clearBoard","handleClearPath","clearPath","handleClick","visualizeDijkstra","width","window","innerWidth","height","innerHeight","getInitialGrid","textAlign","nodesInShortestPathOrder","unshift","getNodesInShortestPathOrder","animateDijkstra","animateShortestPath","toggleVisit","newNode","totRow","totCol","currentRow","createNode","ms","App","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bab6c3ac.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport _ from \"lodash\";\nimport \"./chessboard.css\";\n\nexport const CheckerBoard = ({ size, queenPositions = [] }) => {\n  let checkerBoard = [];\n  for (let i = 0; i <= size; i++) {\n    let newRow = true;\n    for (let j = 0; j <= size; j++) {\n      let classNames = [\"block\"];\n      if (i == 0) {\n        classNames.push(\"chessColumnNumber\");\n        checkerBoard.push(\n          <div className={classNames.join(\" \")}>\n            <span className=\"coin\">{j - 1 < 0 ? \"\" : j - 1}</span>\n          </div>\n        );\n        continue;\n      }\n      if (newRow) {\n        classNames.push(\"clearRow\");\n        classNames.push(\"chessColumnNumber\");\n        newRow = false;\n        checkerBoard.push(\n          <div className={classNames.join(\" \")}>\n            <span className=\"coin\">{i - 1 < 0 ? \"\" : i - 1}</span>\n          </div>\n        );\n        continue;\n      }\n\n      classNames.push(\n        (i + j) % 2 === 0 ? \"chessColumnWhite\" : \"chessColumnBlack\"\n      );\n      const pos = { x: i - 1, y: j - 1 };\n      checkerBoard.push(\n        <div key={`check-${i}${j}`} className={classNames.join(\" \")}>\n          {_.find(queenPositions, pos) ? (\n            <span className=\"coin\">&#x2655;</span>\n          ) : (\n            <span></span>\n          )}\n        </div>\n      );\n    }\n  }\n  return checkerBoard;\n};\n","import React from 'react';\nimport { createStyles, makeStyles } from '@mui/styles';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { InputLabel } from '@mui/material';\nimport { MenuItem } from '@mui/material';\n\nimport FormControl from '@mui/material/FormControl';\n\nimport { Select } from '@mui/material';\n\nconst theme = createTheme();\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nconst SimpleSelect = (props) => {\n    const classes = useStyles();\n    const [age, setAge] = React.useState('0');\n\n    const handleChange = (event) => {\n        setAge(event.target.value);\n        props.onAlgoChanged(event.target.value);\n    };\n\n    return (\n        <ThemeProvider theme = {theme}>\n        <div>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">Algorithm</InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={age}\n                    onChange={handleChange}\n                >\n                    {props.items.map( (item,itemidx)=>{\n                        return(\n                            <MenuItem\n                                key={itemidx}\n                                value={itemidx}>{item}</MenuItem>\n                        );\n                    } )}\n                </Select>\n            </FormControl>\n        </div>\n        </ThemeProvider>\n    );\n}\n\nexport default SimpleSelect;","import React, {Component} from 'react';\nimport SimpleSelect from \"./simpleSelect\";\nimport {Link} from \"react-router-dom\";\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                <span className=\"navbar-brand\">ADA</span>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" >\n                    <Link to={\"/\"}>\n                        <span style={{color:\"white\"}}>\n                            Home\n                        </span>\n                    </Link>\n                </div>\n\n            </nav>\n        );\n    }\n}\n\nexport default Navbar;","export const nqueen = async (n, queenPos = [], col, setQueenPos) => {\n  console.log(queenPos.length, parseInt(n));\n  if (queenPos.length == parseInt(n)) {\n    console.log(queenPos);\n    return { solved: true, queenPos: queenPos };\n  }\n  for (let i = 0; i < n; i++) {\n    const newPos = { x: col, y: i };\n    const safeCheck = isSafe(queenPos, newPos);\n    if (safeCheck) {\n      queenPos.push(newPos);\n      setQueenPos([...queenPos]);\n      await sleep(1);\n      const res = await nqueen(n, queenPos, col + 1, setQueenPos);\n      if (res.solved) {\n        return res;\n      }\n\n      queenPos.pop();\n      await sleep(0.25);\n      setQueenPos([...queenPos]);\n    }\n  }\n  return { solved: false, queenPos: queenPos };\n};\nconst isSafe = (queenPos = [], newPos = {}) => {\n  for (let i = 0; i < queenPos.length; i++) {\n    const pos = queenPos[i];\n    if (isUnderAttack(newPos, pos)) {\n      return false;\n    }\n  }\n  return true;\n};\nconst isUnderAttack = (newPos, queenPosition) => {\n  const d1 = newPos.x - newPos.y;\n  const d2 = newPos.x + newPos.y;\n  return (\n    queenPosition.x == newPos.x ||\n    queenPosition.y == newPos.y ||\n    queenPosition.x + queenPosition.y == d2 ||\n    queenPosition.x - queenPosition.y == d1\n  );\n};\nfunction sleep(s) {\n  return new Promise((resolve) => setTimeout(resolve, s * 1000));\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport { CheckerBoard } from \"./checkerboard\";\nimport Navbar from \"../pathfinderComponents/navbar\";\nimport './queen.css';\nimport { useState } from \"react\";\nimport React from \"react\";\nimport { nqueen } from \"../../utilities/nqueen\";\n\nfunction Nqueen() {\n  const [count, setCount] = useState(2);\n  const [result, setResult] = useState(\"\");\n  const [queenPos, setQueenPos] = useState([]);\n  return (\n    <div className=\"nqueen\">\n      <Navbar/>\n    <div className=\"container-fluid \">\n      <div className=\"row\">\n        <div className=\"col-md-8 chessBoardArea\" style={{ padding: \"3vh\" }}>\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              \n              <CheckerBoard size={count} queenPositions={queenPos} />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div\n              className=\"col-md-12\"\n              style={{ color: \"#eee\", padding: \"4vh\" }}\n            >\n              {result}\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-4 chessBoardArea\" style={{ padding: \"3vh\" }}>\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <label style={{ color: \"white\" }}>Chess Board Size:</label>\n              <input\n                type=\"number\"\n                min=\"2\"\n                max=\"16\"\n                value=\"\"\n                onChange={(v) => {\n                  console.log(v.target.value);\n                  setCount(v.target.value);\n                }}\n              />\n              <button\n                onClick={() => placeQueens(setQueenPos, count, setResult)}\n              >\n                Place Queens\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    </div>\n  );\n}\nconst placeQueens = async (setQueenPos, count, setResult) => {\n  setResult(\"\");\n  const queenPos = [];\n  const solution = await nqueen(count, queenPos, 0, setQueenPos);\n  if (solution.solved) {\n    setResult(\"Solved! All queens are placed in non attacking positions!\");\n  } else {\n    setResult(\"Cannot find safe positions for all the queens!\");\n  }\n};\nexport default Nqueen;\n","import React from 'react';\nimport Navbar from '../pathfinderComponents/navbar';\nimport {Link } from \"react-router-dom\";\n\nconst Home = () => {\n  return (\n    <div>\n      <Navbar/>\n      <h1>Welcome to ADA Assignment</h1>\n\n      <ul className=\"App-header\">\n          <li>\n            <Link to=\"/nqueen\">Nqueen</Link>\n          </li>\n          <li>\n            <Link to=\"/paths\">Graphs</Link>\n          </li>\n        </ul>\n\n        <h1>Group Members</h1>\n        <ul className=\"App-header\">\n          <li>\n            <p>Tanmay Srivastava : 20DCS011</p>\n          </li>\n          <li>\n          <p>Somesh : 20DCS023</p>\n          </li>\n        </ul>\n\n        <h2>Submited to Dr. Nitin Gupta</h2>\n    </div>\n  );\n};\n  \nexport default Home;","import React, {Component} from 'react';\nimport './node.css'\nclass Node extends Component {\n    static = {\n        row: this.props.row,\n        col: this.props.col\n    }\n    render() {\n        const { row,col,isVisited, onMouseDown, onMouseEnter,onMouseUp } = this.props;\n        return (\n            <div\n                id = {`node-${this.props.row}-${this.props.col}`}\n                className={this.getClassName()}\n                onMouseDown={() => onMouseDown(row,col)}\n                onMouseEnter={() => onMouseEnter(row,col)}\n                onMouseUp={() => onMouseUp(row,col)}\n            />\n        );\n    }\n    getClassName(){\n        if(this.props.node.isWall === true){\n            return \"node node-wall\";\n        } else if( this.props.node.isStartNode === true ){\n            return \"node  node-start\";\n        } else if( this.props.node.isEndNode === true ){\n            return \"node  node-end\";\n        } else if(this.props.node.ispathNode){\n            return 'node node-shortest-path';\n        }else if( this.props.node.isVisited === true ){\n            return \"node  node-visited\";\n        } else{\n            return \"node\";\n        }\n    }\n}\n\nexport default Node;","import React, {Component} from 'react';\nimport Node from \"./node\";\nimport './grid.css';\nclass Grid extends Component {\n    state = {\n        grid: this.props.grid\n    }\n\n    render() {\n        return (\n            <div className=\"Grid\">\n                {this.props.grid.map((row, rowidx) => {\n                    return (\n                        <div key={rowidx}>\n                            {row.map((node, nodeidx) => {\n                                const {row, col, isWall, visitedNode, } = node;\n                                return (\n                                    <Node\n                                        key={nodeidx}\n                                        row={row}\n                                        col={col}\n                                        node={node}\n                                        isWall={isWall}\n                                        visitedNode={ visitedNode }\n                                        onMouseDown = {this.props.onMouseDown}\n                                        onMouseEnter = {this.props.onMouseEnter}\n                                        onMouseUp = {this.props.onMouseUp}\n                                    />\n                                );\n                            })}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nexport default Grid;","import React, {Component} from 'react';\nimport SimpleSelect from \"./simpleSelect\";\n\nclass Menu extends Component {\n    render() {\n        return (\n            <nav className=\"nav alert-dark\" >\n                <SimpleSelect\n                    onAlgoChanged = {this.props.onAlgoChanged}\n                    items={this.props.algorithms}\n                />\n                <SimpleSelect\n                    onAlgoChanged={this.props.onMazeChanged}\n                    items={this.props.mazes}\n                />\n                <button\n                    className='btn btn-lg btn-secondary m-2'\n                    onClick={this.props.onCreateMaze}>\n                    Create Maze\n                </button>\n                <button\n                    onClick={this.props.onVisualize}\n                    className=\"btn btn-warning btn-lg\"\n                >Visualize</button>\n                <button\n                    onClick={this.props.onClearPath}\n                    className='btn btn-danger btn-lg m-2'>Clear Path</button>\n                <button\n                    onClick={this.props.onClearBoard}\n                    className='btn btn-danger btn-lg m-2'>Clear Board</button>\n            </nav>\n        );\n    }\n}\n\nexport default Menu;","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function getMaze(board,row,col){\n    const pairs = [];\n    let newBoard = board.slice();\n    for( let i = 0;i <col;i++){\n        newBoard[0][i].isWall = true;\n        pairs.push({\n            xx:0,\n            yy:i\n        });\n    }\n    for( let i = 0;i <row;i++){\n        newBoard[i][col-1].isWall = true;\n        pairs.push({\n            xx:i,\n            yy:col-1\n        });\n    }\n    for( let i = col-1;i>=0;i-- ){\n        newBoard[row-1][i].isWall = true;\n        pairs.push({\n            xx:row-1,\n            yy:i\n        });\n    }\n    for(let i = row-1;i>=0;i--){\n        newBoard[i][0].isWall = true;\n        pairs.push({\n            xx:i,\n            yy:0\n        });\n    }\n    decideMaze(pairs,newBoard,1,row-2,1,col-2);\n    //console.log(\"here\");\n    return pairs;\n}\nlet val = 0;\n\nfunction decideMaze(pairs,board,startRow,endRow,startCol,endCol) {\n    //console.log(\"count\");\n    val++;\n\n    if( ((endRow-startRow) <=1) && ((endCol - startCol) <=1) ){\n        return;\n    }\n\n     if( (endCol - startCol) > (endRow - startRow) ){\n        recursiveMazeVertical(pairs,board,startRow,endRow,startCol,endCol);\n    } else{\n        recursiveMazeHorizontal(pairs,board,startRow,endRow,startCol,endCol);\n    }\n}\nfunction recursiveMazeVertical(pairs,board,startRow,endRow,startCol,endCol){\n    let mid = Math.floor((endCol+startCol)/2);\n    let random = Math.floor(Math.random() * (endRow-startRow+1)) + startRow;\n    //console.log( \"row \",random,\" \",startRow,\" \",endRow );\n    let start = startRow;\n    if( !board[startRow-1][mid].isWall ){\n        random = start;\n        start++;\n    }\n    let end = endRow;\n    if( !board[endRow+1][mid].isWall ){\n        random = end;\n        end--;\n    }\n    for(let i = start;i<=end;i++){\n        if( i!==random ){\n            board[i][mid].isWall = true;\n            pairs.push({\n                xx:i,\n                yy:mid\n            });\n        }\n    }\n    decideMaze(pairs,board,startRow,endRow,startCol,mid-1);\n    decideMaze(pairs,board,startRow,endRow,mid+1,endCol);\n}\nfunction recursiveMazeHorizontal(pairs,board,startRow,endRow,startCol,endCol){\n    let mid = Math.floor((endRow+startRow)/2);\n  //  console.log(\"mid: \",mid);\n    let random = Math.floor(Math.random() * (endCol-startCol+1)) + startCol;\n    let start = startCol;\n    if( !board[mid][startCol-1].isWall ){\n        random = start;\n        start++;\n    }\n    let end = endCol;\n    if( !board[mid][endCol+1].isWall ){\n        random = end;\n        end--;\n    }\n    for(let i = start;i<=end;i++){\n        if( i!==random ){\n            board[mid][i].isWall = true;\n            pairs.push({\n                xx:mid,\n                yy:i\n            });\n        }\n    }\n    decideMaze(pairs,board,startRow,mid-1,startCol,endCol);\n    decideMaze(pairs,board,mid+1,endRow,startCol,endCol);\n\n}","export function bfsdfs(grid,startNode,endNode,algo){\n    var list = [];\n    const nodesInOrder = [];\n    nodesInOrder.push(startNode);\n    list.push(startNode);\n    startNode.isVisited = true;\n    while(!!list.length){\n        const currentNode = (algo === \"bfs\" ? list.shift():list.pop());\n        nodesInOrder.push(currentNode);\n        if( currentNode === endNode ) return nodesInOrder;\n        if( algo === \"dfs\" ) currentNode.isVisited = true;\n        const nodesToPush = getNeighbours(grid,currentNode);\n        for( const node of nodesToPush ){\n            if(algo === \"bfs\"){\n                node.isVisited = true;\n            }\n            node.previousNode = currentNode;\n            list.push(node);\n\n        }\n    }\n    return nodesInOrder;\n}\n\nfunction getNeighbours(grid,node){\n    const neighbors = [];\n    const {col, row} = node;\n   // console.log(node);\n\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => (!neighbor.isVisited && !neighbor.isWall ));\n}","import React, {Component, Fragment} from 'react';\nimport Grid from \"./grid\";\nimport Navbar from \"./navbar\";\nimport Menu from \"./menu\";\nimport {dijkstra,getNodesInShortestPathOrder} from \"../algorithms/dijkstra\";\nimport {getMaze} from \"../algorithms/recursiveMaze\";\nimport {bfsdfs} from \"../algorithms/bfs\";\nimport {randomMaze} from \"../algorithms/randomMaze\";\nimport { createStyles, makeStyles } from '@mui/styles';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme();\n\nclass Pathfinder extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid:[],\n            mouseIsPressed:false,\n            algorithms:[\n                \"Dijsktra\",\"BFS\",\"DFS\"\n            ],\n            algo:0,\n            mazes:[\n                \"Recursive division\",\"Random\",\"Recursive Horizontal bias(NA)\",\"Recursive Vertical bias(NA)\"\n            ],\n            maze:0\n        }\n    }\n    componentDidMount() {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const row = Math.max(Math.floor(height/25)-7,10);\n        const col = Math.floor(width/25);\n        const startNode = {\n            row:4,\n            col:4\n        };\n        const endNode = {\n            row: row-5,\n            col: col-5\n        }\n        // console.log( endNode.row );\n        const grid = getInitialGrid(row,col);\n        grid[startNode.row][startNode.col].isStartNode = true;\n        grid[row-5][col-5].isEndNode = true;\n        this.setState({grid,row,col,startNode,endNode});\n    }\n\n    render() {\n        return (\n            <ThemeProvider theme = {theme}>\n            <Fragment>\n                <Navbar/>\n\n                <Menu\n                    onAlgoChanged = {this.handleAlgoChanged}\n                    onVisualize = {this.handleClick}\n                    algorithms={this.state.algorithms}\n                    mazes={this.state.mazes}\n                    onMazeChanged={this.handleMazeChanged}\n                    onCreateMaze={this.handleCreateMaze}\n                    onClearBoard={this.handleClearBoard}\n                    onClearPath={this.handleClearPath}\n                />\n                <span style={{margin: 2}}/>\n                <div style={{textAlign:\"center\"}} >\n                    <Grid\n                        grid={this.state.grid}\n                        onMouseDown={this.handleMouseDown}\n                        onMouseEnter={this.handleMouseEnter}\n                        onMouseUp={this.handleMouseUp}\n                    />\n                </div>\n            </Fragment>\n            </ThemeProvider>\n        );\n    }\n\n    handleMouseDown = (row, col) => {\n        if((this.state.startNode.row!==row || this.state.startNode.col!==col) && (this.state.endNode.row!==row || this.state.endNode.col!==col) ){\n            const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n            this.setState({grid:newGrid});\n        }\n        this.setState({mouseIsPressed: true});\n    }\n\n    handleMouseEnter = (row, col) => {\n        if (this.state.mouseIsPressed === false) return;\n        if((this.state.startNode.row!==row || this.state.startNode.col!==col) && (this.state.endNode.row!==row || this.state.endNode.col!==col) ){\n            const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n            this.setState({grid:newGrid});\n        }\n    }\n\n    handleMouseUp = (row,col) => {\n        this.setState({mouseIsPressed: false});\n    }\n\n    handleAlgoChanged = (val) =>{\n        this.setState({algo:val});\n    }\n\n    handleMazeChanged = (val)=>{\n        this.setState({maze:val});\n    }\n\n    handleCreateMaze = () =>{\n        let pairs;\n        switch (this.state.maze){\n            case 1:\n                pairs= randomMaze(this.state.grid,this.state.row,this.state.col);\n                break;\n            default:\n                pairs= getMaze(this.state.grid,this.state.row,this.state.col);\n        }\n        const {startNode,endNode} = this.state;\n        for( let i = 0;i<pairs.length;i++ ){\n            setTimeout(()=>{\n                if( i === pairs.length-1 ){\n                   // this.setState({grid:this.state.grid});\n                    const grid = this.state.grid;\n                    grid[ startNode.row ][startNode.col]={...grid[ startNode.row ][startNode.col],isWall: false};\n                    grid[endNode.row][endNode.col]={...grid[endNode.row][endNode.col],isWall: false};\n                    this.setState({grid});\n                }\n                if((pairs[i].xx!==startNode.row || pairs[i].yy!==startNode.col) && (pairs[i].xx!==endNode.row || pairs[i].yy!==endNode.col) ){\n                    document.getElementById(`node-${pairs[i].xx}-${pairs[i].yy}`).className = \"node node-wall\";\n                }\n            },i*20);\n        }\n    }\n    handleClearBoard = ()=>{\n        const {grid,row,col} = this.state;\n        this.setState({grid:clearBoard(grid,row,col)});\n    }\n    handleClearPath = () =>{\n        const {grid,row,col} = this.state;\n        this.setState({grid:clearPath(grid,row,col)});\n    }\n    handleClick = () =>{\n      /*  for(let i = 0;i<20;i++){\n            for(let j = 0; j<50;j++){\n                document.getElementById(`node-${i}-${j}`).className = \"node\";\n            }\n        }*/\n        this.visualizeDijkstra();\n        /*for(let i = 0;i<this.state.row;i++){\n            for(let j = 0; j<this.state.col;j++){\n                setTimeout(()=>{\n                    const newGrid = toggleVisit(this.state.grid,i,j);\n                    this.setState({grid:newGrid});\n                    //document.getElementById(`node-${i}-${j}`).className = \"node node-visited\";\n                },100*(i+j)+j);\n            }\n        }*/\n    }\n\n    visualizeDijkstra() {\n        const {grid} = this.state;\n        const startNode = grid[this.state.startNode.row][this.state.startNode.col];\n        const finishNode = grid[this.state.endNode.row][this.state.endNode.col];\n        let visitedNodesInOrder;\n        switch (this.state.algo){\n            case 0:\n                visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n                break;\n            case 1:\n                visitedNodesInOrder = bfsdfs(grid, startNode, finishNode,\"bfs\");\n                break;\n            default:\n                visitedNodesInOrder = bfsdfs(grid, startNode, finishNode,\"dfs\");\n        }\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n    async animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n\n            if (i === visitedNodesInOrder.length) {\n              //  setTimeout(() => {\n                    await sleep(100);\n                    await this.animateShortestPath(nodesInShortestPathOrder);\n\n              //  }, 10 * (i+10));\n                return;\n            }\n           // setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                const newGrid = toggleVisit(this.state.grid,node.row,node.col);\n                //this.setState({grid:newGrid});\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-visited';\n                await sleep(10);\n           // }, 10 * i);\n        }\n    }\n\n    async animateShortestPath(nodesInShortestPathOrder) {\n        const grid = this.state.grid;\n        const newGrid = grid.slice();\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n         //   setTimeout(() => {\n\n                const node = nodesInShortestPathOrder[i];\n                const newNode = {...newGrid[node.row][node.col],ispathNode:true};\n                newGrid[node.row][node.col] = newNode;\n                if( i === nodesInShortestPathOrder.length-1 ){\n                    this.setState({grid:newGrid});\n                }\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-shortest-path';\n                await sleep(50);\n            //}, 50 * i);\n        }\n    }\n\n}\n\nconst clearPath = (grid,row,col)=>{\n    const newGrid = grid.slice();\n    for(let i = 0;i < row ; i++){\n        for( let j = 0;j < col; j++){\n            const node = newGrid[i][j];\n            const newNode = {\n                ...node,\n                distance:Infinity,\n                visitedNode: false,\n                isVisited:false,\n                ispathNode:false,\n                previousNode:null\n\n            };\n            newGrid[i][j] = newNode;\n        }\n    }\n    return newGrid;\n}\nconst clearBoard = (grid,row,col)=>{\n    const newGrid = grid.slice();\n    for(let i = 0;i < row ; i++){\n        for( let j = 0;j < col; j++){\n            const node = newGrid[i][j];\n            const newNode = {\n                ...node,\n                isWall: false,\n                distance:Infinity,\n                visitedNode: false,\n                isVisited:false,\n                ispathNode:false,\n                previousNode:null\n\n            };\n            newGrid[i][j] = newNode;\n        }\n    }\n    return newGrid;\n}\n\nconst toggleVisit = (grid,row,col) =>{\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        visitedNode: !node.visitedNode\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n}\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: true//!node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\nconst getInitialGrid = (totRow,totCol) => {\n    const grid = [];\n    for (let row = 0; row < totRow; row++) {\n        const currentRow = [];\n        for (let col = 0; col < totCol; col++) {\n            currentRow.push(createNode(row,col));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n}\n\nconst createNode = (row,col)=>{\n    return {\n        row,\n        col,\n        isWall: false,\n        isStartNode:false,\n        isEndNode:false,\n        distance:Infinity,\n        visitedNode: false,\n        isVisited:false,\n        ispathNode:false,\n        previousNode:null\n    };\n}\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default Pathfinder;","export function randomMaze(board,row,col){\n    let newBoard = board.slice();\n    const pairs = [];\n    for(let i = 0;i<row;i++){\n        for( let j = 0;j <col;j++){\n            const random = Math.floor(Math.random()*100)+10;\n            if( random%4 === 0 ){\n                newBoard[i][j].isWall = true;\n                pairs.push({\n                    xx:i,\n                    yy:j\n                });\n            }\n        }\n    }\n    return pairs;\n}","import \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\nimport Nqueen from \"./components/checkerboard/n-queen-comp\";\nimport Home from \"./components/home/home\";\nimport Pathfinder from \"./components/pathfinderComponents/pathfinder\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          <Route exact path=\"/\" element={<Home />}></Route>\n          <Route exact path=\"/nqueen\" element={<Nqueen />}></Route>\n          <Route exact path=\"/paths\" element={<Pathfinder />}></Route>\n        </Routes>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}